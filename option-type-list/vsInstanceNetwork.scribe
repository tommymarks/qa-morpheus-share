resource "option-type-list" "vsInstanceNetwork" {
  name = "vsInstanceNetwork"
  uuid = "3a3c6132-96de-4b7e-8763-7e234bcb1305"
  apiType = "instanceNetworks"
  ignoreSSLErrors = false
  realTime = true
  requestScript = <<EOF
function parseObjectProperties (obj, parse) {
  for (var k in obj) {
    if (typeof obj[k] === 'object' && obj[k] !== null) {
      parseObjectProperties(obj[k], parse)
    } else {
      parse(k, obj[k])
    }
  }
}


// then apply to the property the task you want, in this case just console
//console.log('---------Start Req Instance Networks Input------')
//parseObjectProperties(input, function(k, prop) {
//console.log(k + ': ' + prop)
//})
//console.log('---------Stop Req Instance Networks Input------')

//console.log('---------Start Req Instance Networks Data------')
//parseObjectProperties(data, function(k, prop) {
//console.log(k + ': ' + prop)
//})
//console.log('---------Stop Req Instance Networks Data------')
if (input.vsClouds && input.vsGroups && input.vsResourcepools) {
 results.poolId = input.vsResourcepools
 results.zoneId = input.vsClouds
 results.siteId = input.vsGroups
}
EOF
  sourceMethod = "GET"
  translationScript = <<EOF
function parseObjectProperties (obj, parse) {
  for (var k in obj) {
    if (typeof obj[k] === 'object' && obj[k] !== null) {
      parseObjectProperties(obj[k], parse)
    } else {
      parse(k, obj[k])
    }
  }
}


//console.log('---------Start Trans InstanceNetworks Data------')
//parseObjectProperties(data, function(k, prop) {
//console.log(k + ': ' + prop)
//})
//console.log('---------Stop Trans InstanceNetworks Data------')

for (var x = 0; x < data.length; x++) {
  if(data[x].group == "subnet"){
    if(data[x].name.includes(input.vsNetworks)){
      results.push({name:data[x].name,value:data[x].id});
    }
  }
}
EOF
  type = "api"
  visibility = "public"
}