resource "file-content" "36d2fe4f-0fc1-4a63-8ede-286f7a2b2e14" {
  uuid = "36d2fe4f-0fc1-4a63-8ede-286f7a2b2e14"
  content = <<EOF
import com.morpheus.*;
import com.morpheus.util.ComputeUtility;
com.morpheus.ComputeServer.withNewSession {
def ctx = grails.util.Holders.applicationContext
def account = com.bertramlabs.plugins.Account.get(1l)
def servicePlan = ServicePlan.get(301095L);
def instanceType = InstanceType.findByCode('ubuntu')
def provisionTypeSource = ProvisionType.findByCode('google')
def originalPlanOptions = [:]
def instanceTypeLayout = InstanceTypeLayout.withCriteria(uniqueResult:true) {
    eq('instanceType',instanceType)
    eq('provisionType',provisionTypeSource)
    eq('instanceVersion','22.04')
}

def plan = servicePlan
def provisionTypes = InstanceTypeLayout.withCriteria(readOnly:true) {
				eq('instanceType', instanceTypeLayout.instanceType)
				eq('instanceVersion', instanceTypeLayout.instanceVersion)
				if(!instanceTypeLayout.serverType) {
					isNull('serverType')
				} else {
					eq('serverType', instanceTypeLayout.serverType)
				}

				projections {
					property('provisionType')
				}
}?.unique()?.findAll { !['kvm', 'vagrant', 'docker'].contains(it.code) }
def plans = []
provisionTypes?.each { provisionType ->
    
				def servicePlans = ServicePlan.withCriteria(readOnly: true) {
					eq('provisionType', provisionType)
					eq('active', true)
					eq('deleted', false)
					eq('provisionable', true)
					or {
						eq('customCores', false)
						isNull('customCores')
					}
					or {
						eq('customCpu', false)
						isNull('customCores')
					}
					or {
						eq('customMaxMemory', false)
						isNull('customMaxMemory')
					}
					or {
						eq('account', account)
						isNull('account')
					}
					order('maxMemory', 'asc')
				}
println "Provision Type: ${provisionType.code}: ${servicePlans}"
    // Iterate each plan, calculating a 'distanceScore' to determine which plan is the closest
				// Score calculation weights the memory (in bytes) and then the core/cpu is weighted
				// heavily (equivalent to 1Gb in memory) to make sure a plan with a closer core/cpu is considered closer
    def planCore = ComputeUtility.ONE_GIGABYTE * ((plan.customCores ? originalPlanOptions.cores : plan.maxCores) ?: (plan.customCpu ? originalPlanOptions.cpu : plan.maxCpu) ?: originalPlanOptions.cores ?: originalPlanOptions.cpu ?: 0)
    def planMemory = (plan.customMaxMemory ? originalPlanOptions.memory : plan.maxMemory) ?: originalPlanOptions.memory ?: 0
    def closestPlan
    def closestPlanDistanceScore
    servicePlans?.each { ServicePlan sp ->
        def spCore = ComputeUtility.ONE_GIGABYTE * (sp.maxCores ?: sp.maxCpu ?: 0)
        def distanceScore = Math.abs(planMemory - sp.maxMemory) + Math.abs(planCore - spCore)
        if (closestPlan == null || distanceScore < closestPlanDistanceScore){
            def hasPriceSets = sp.getActivePriceSets()?.size() > 0
            if(hasPriceSets) { // Quick check to even see if there are prices
                closestPlan = sp
                closestPlanDistanceScore = distanceScore
            }
        }
    }
    if (closestPlan) {
        plans << closestPlan
    }
}

println("Plans: ${plans.findAll{it.provisionType.code == 'azure'}}")
def rtn = [data:[]]
def zoneIds = ctx['permissionService'].getListOfZonesAccountCanSee(account)
			def zones = ComputeZone.withCriteria {
				inList('id', zoneIds)
			}?.unique { zone1, zone2 ->
				"${zone1?.zoneType.code}${zone1.regionCode}" <=> "${zone2?.zoneType.code}${zone2.regionCode}"
			}
println "Zones: ${zones*.name}"
			zones?.sort { it.name }?.each { zone ->

				def zonePlanMap = [zone: zone, regionCode: zone.regionCode, plans: []]
				// Friendly name for regioncode
				if(zone.regionCode) {
					switch(zone.zoneType.code) {
						case 'amazon':
							zonePlanMap.regionCode = ReferenceData.withCriteria(uniqueResult: true, readOnly: true){
								eq('category', 'amazon.ec2.region')
								eq('value', zone.regionCode)
							}?.name
							break
						default:
							break
					}
				}
                println "Iterating over Zone: ${zone.name} - ${zone.zoneType.code}"
				plans?.each { ServicePlan p ->
                    if(p.provisionType.code == 'azure' && zone.zoneType.provisionTypes.find{p.provisionType.id == it.id} ) {
                        println "WE FOUND AZURE"
                    }
					if (zone.zoneType.provisionTypes.find { it.id == p.provisionType.id }) {
						// Sometimes our algorithm finds another plan in the provision type rather than the one passed in
						// If so... force it to use the 1 passed in
						if (p.provisionType?.id == plan.provisionType?.id && p.id != plan.id) {
							zonePlanMap.plans << [plan: plan, price: 0, cost: 0]
println("skip plan")
						} else {
println("use plan")
							zonePlanMap.plans << [plan: p, price: 0, cost: 0]
						}
					}
				}
				if(zonePlanMap.plans) {
					rtn.data << zonePlanMap
				}
			}
println rtn.data.findAll{it.zone.zoneType.code == 'azure'}
println("done")
rtn.priceRows = []
def results = ctx['accountPriceService'].getComparableZonePlansMap(account, instanceTypeLayout, servicePlan,'month', [:])
results.data.each { zonePlanMap ->
    def planOptions = ctx['accountPriceService'].parseParamsForEstimatedPrice(zonePlanMap.zone, [:])
    if(zonePlanMap.zone.zoneType.code == 'azure') {
        println "checking azure"
    }
						zonePlanMap.plans?.each { p ->
							ctx['accountPriceService'].simulateVolumesForPlan(p.plan, planOptions)
							def priceData = ctx['accountPriceService'].getEstimatedPrice(ctx['springSecurityService'].currentUser, account, instanceTypeLayout, p.plan, 'month', planOptions) 
                            def planPrice = ctx['accountPriceService'].getMatchingPriceSets([p.plan], planOptions)
							p.price = priceData.price ?: 0
							p.cost = priceData.cost ?: 0
							p.currency = priceData.currency
							p.foundPricing = priceData.foundPricing
                                if(zonePlanMap.zone.zoneType.code == 'azure') {
                                    println planPrice
                                }
							if(p.price && p.foundPricing) {
								rtn.priceRows << zonePlanMap
							}
						}
}
}
return null

EOF
  dateCreated = "2023-04-21T13:31:44.000Z"
  editable = true
  enabled = true
  fileVersion = "1"
  lastUpdated = "2023-04-21T14:49:44.000Z"
  sourceType = "local"
}